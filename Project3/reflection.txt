I would say the most important change I made is changing the method from DELETE to POST. Even though I could have used GET, POST is better for security and data integrity (your words). Actually, I just double-checked and I forgot that the password was off-limits so I guess the user actually being able to log in is pretty important as well. Regarding validation rules, adding “required” to some of the fields such as username and password was necessary since without that keyword, anyone can just submit the form without any requirement of valid information. I also found standard regex online that is used for email validation so I used that for the pattern for the email input. Without that pattern, I was able to just input anything that wasn’t even close to an email, even when I made the type equal email (HTML really slacked off with that one). My current version still doesn’t determine if it’s an ACTUAL email but I believe for that, the procedure is to send a validation email for the user to click a link on to ensure that the email is in fact real. 

If this was a live production form, I feel like I would want to look more into encryption. Being able to see login information on the Payload section in the developer tools felt troubling but I looked more into it (https://stackoverflow.com/questions/74612555/django-login-payload-visible-in-plaintext-in-chrome-devtools). Only the actual user is able to see this information fortunately so while encryption isn’t necessary in this specific case, it’s still necessary in general.
